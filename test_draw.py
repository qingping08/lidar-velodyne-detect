import mayavi.mlab as mlab
import numpy as np
import torch
from pcdet.config import cfg, cfg_from_yaml_file
from pcdet.datasets import DatasetTemplate
from pcdet.models import build_network, load_data_to_gpu
from pcdet.utils import common_utils
from visual_utils import visualize_utils as V
import argparse
import glob
from pathlib import Path
import demo
from visual_utils import visualize_utils as V

ref_3d=torch.tensor([

[[ 8.9112e+00, -2.0012e+00, -1.6553e+00],
         [ 8.9581e+00, -3.7104e+00, -1.6553e+00],
         [ 4.5004e+00, -3.8325e+00, -1.6553e+00],
         [ 4.4536e+00, -2.1233e+00, -1.6553e+00],
         [ 8.9112e+00, -2.0012e+00, -9.2259e-02],
         [ 8.9581e+00, -3.7104e+00, -9.2259e-02],
         [ 4.5004e+00, -3.8325e+00, -9.2259e-02],
         [ 4.4536e+00, -2.1233e+00, -9.2259e-02]],

        [[ 1.5386e+01, -2.2097e+00, -1.6263e+00],
         [ 1.5389e+01, -3.8133e+00, -1.6263e+00],
         [ 1.1554e+01, -3.8208e+00, -1.6263e+00],
         [ 1.1551e+01, -2.2172e+00, -1.6263e+00],
         [ 1.5386e+01, -2.2097e+00, -1.0841e-01],
         [ 1.5389e+01, -3.8133e+00, -1.0841e-01],
         [ 1.1554e+01, -3.8208e+00, -1.0841e-01],
         [ 1.1551e+01, -2.2172e+00, -1.0841e-01]],

        [[ 2.2135e+01,  5.3410e+00, -1.9296e+00],
         [ 2.2167e+01,  6.9320e+00, -1.9296e+00],
         [ 2.5869e+01,  6.8568e+00, -1.9296e+00],
         [ 2.5837e+01,  5.2659e+00, -1.9296e+00],
         [ 2.2135e+01,  5.3410e+00, -4.6180e-01],
         [ 2.2167e+01,  6.9320e+00, -4.6180e-01],
         [ 2.5869e+01,  6.8568e+00, -4.6180e-01],
         [ 2.5837e+01,  5.2659e+00, -4.6180e-01]],

        [[ 2.1507e+01, -2.1966e+00, -1.6249e+00],
         [ 2.1420e+01, -3.7567e+00, -1.6249e+00],
         [ 1.7956e+01, -3.5645e+00, -1.6249e+00],
         [ 1.8043e+01, -2.0045e+00, -1.6249e+00],
         [ 2.1507e+01, -2.1966e+00, -1.2701e-01],
         [ 2.1420e+01, -3.7567e+00, -1.2701e-01],
         [ 1.7956e+01, -3.5645e+00, -1.2701e-01],
         [ 1.8043e+01, -2.0045e+00, -1.2701e-01]],

        [[ 5.2259e+01, -1.9651e+00, -1.6171e+00],
         [ 5.2240e+01, -3.5828e+00, -1.6171e+00],
         [ 4.8559e+01, -3.5402e+00, -1.6171e+00],
         [ 4.8578e+01, -1.9225e+00, -1.6171e+00],
         [ 5.2259e+01, -1.9651e+00, -3.9013e-02],
         [ 5.2240e+01, -3.5828e+00, -3.9013e-02],
         [ 4.8559e+01, -3.5402e+00, -3.9013e-02],
         [ 4.8578e+01, -1.9225e+00, -3.9013e-02]],

        [[ 4.5029e+01,  5.5780e+00, -1.9503e+00],
         [ 4.4987e+01,  7.0900e+00, -1.9503e+00],
         [ 4.8934e+01,  7.1988e+00, -1.9503e+00],
         [ 4.8976e+01,  5.6867e+00, -1.9503e+00],
         [ 4.5029e+01,  5.5780e+00, -4.3732e-01],
         [ 4.4987e+01,  7.0900e+00, -4.3732e-01],
         [ 4.8934e+01,  7.1988e+00, -4.3732e-01],
         [ 4.8976e+01,  5.6867e+00, -4.3732e-01]],

        [[ 1.4774e+00, -5.8030e+00, -1.6090e+00],
         [-1.7941e-01, -6.1872e+00, -1.6090e+00],
         [-9.9247e-01, -2.6809e+00, -1.6090e+00],
         [ 6.6432e-01, -2.2967e+00, -1.6090e+00],
         [ 1.4774e+00, -5.8030e+00,  6.3404e-02],
         [-1.7941e-01, -6.1872e+00,  6.3404e-02],
         [-9.9247e-01, -2.6809e+00,  6.3404e-02],
         [ 6.6432e-01, -2.2967e+00,  6.3404e-02]],

        [[ 4.0215e+01,  7.3592e+00, -1.9087e+00],
         [ 3.9591e+01,  8.8826e+00, -1.9087e+00],
         [ 4.3399e+01,  1.0441e+01, -1.9087e+00],
         [ 4.4023e+01,  8.9179e+00, -1.9087e+00],
         [ 4.0215e+01,  7.3592e+00, -3.8178e-01],
         [ 3.9591e+01,  8.8826e+00, -3.8178e-01],
         [ 4.3399e+01,  1.0441e+01, -3.8178e-01],
         [ 4.4023e+01,  8.9179e+00, -3.8178e-01]],

        [[ 4.4549e+01,  9.6489e+00, -1.9316e+00],
         [ 4.5341e+01,  8.0982e+00, -1.9316e+00],
         [ 4.1688e+01,  6.2322e+00, -1.9316e+00],
         [ 4.0896e+01,  7.7829e+00, -1.9316e+00],
         [ 4.4549e+01,  9.6489e+00, -3.8765e-01],
         [ 4.5341e+01,  8.0982e+00, -3.8765e-01],
         [ 4.1688e+01,  6.2322e+00, -3.8765e-01],
         [ 4.0896e+01,  7.7829e+00, -3.8765e-01]],

        [[ 1.9920e+00, -1.0661e+00, -1.7718e+00],
         [ 1.0897e+00, -2.4219e+00, -1.7718e+00],
         [-2.0198e+00, -3.5252e-01, -1.7718e+00],
         [-1.1175e+00,  1.0033e+00, -1.7718e+00],
         [ 1.9920e+00, -1.0661e+00, -2.3273e-01],
         [ 1.0897e+00, -2.4219e+00, -2.3273e-01],
         [-2.0198e+00, -3.5252e-01, -2.3273e-01],
         [-1.1175e+00,  1.0033e+00, -2.3273e-01]],

         [[ 1.5478e+01, -2.2200e+00, -1.6355e+00],
         [ 1.5471e+01, -3.8417e+00, -1.6369e+00],
         [ 1.1619e+01, -3.8249e+00, -1.6434e+00],
         [ 1.1626e+01, -2.2032e+00, -1.6419e+00],
         [ 1.5476e+01, -2.2214e+00, -1.0749e-01],
         [ 1.5469e+01, -3.8431e+00, -1.0895e-01],
         [ 1.1617e+01, -3.8263e+00, -1.1541e-01],
         [ 1.1624e+01, -2.2046e+00, -1.1395e-01]],

        [[ 9.0656e+00, -1.9924e+00, -1.6637e+00],
         [ 9.1156e+00, -3.7764e+00, -1.6653e+00],
         [ 4.5783e+00, -3.9036e+00, -1.6730e+00],
         [ 4.5283e+00, -2.1196e+00, -1.6715e+00],
         [ 9.0630e+00, -1.9938e+00, -1.1054e-01],
         [ 9.1130e+00, -3.7778e+00, -1.1206e-01],
         [ 4.5757e+00, -3.9050e+00, -1.1980e-01],
         [ 4.5256e+00, -2.1210e+00, -1.1828e-01]],

        [[ 2.2166e+01,  5.3119e+00, -1.9555e+00],
         [ 2.2187e+01,  6.9767e+00, -1.9539e+00],
         [ 2.6016e+01,  6.9297e+00, -1.9475e+00],
         [ 2.5996e+01,  5.2649e+00, -1.9491e+00],
         [ 2.2164e+01,  5.3107e+00, -5.2016e-01],
         [ 2.2184e+01,  6.9754e+00, -5.1864e-01],
         [ 2.6014e+01,  6.9284e+00, -5.1224e-01],
         [ 2.5993e+01,  5.2636e+00, -5.1377e-01]],

        [[ 2.1688e+01, -2.2599e+00, -1.6007e+00],
         [ 2.1586e+01, -3.8058e+00, -1.6023e+00],
         [ 1.8013e+01, -3.5691e+00, -1.6081e+00],
         [ 1.8116e+01, -2.0232e+00, -1.6065e+00],
         [ 2.1686e+01, -2.2612e+00, -1.3001e-01],
         [ 2.1583e+01, -3.8071e+00, -1.3156e-01],
         [ 1.8011e+01, -3.5704e+00, -1.3735e-01],
         [ 1.8113e+01, -2.0245e+00, -1.3580e-01]],

        [[ 4.5026e+01,  5.6532e+00, -2.0019e+00],
         [ 4.5059e+01,  7.1748e+00, -2.0005e+00],
         [ 4.8681e+01,  7.0966e+00, -1.9945e+00],
         [ 4.8648e+01,  5.5751e+00, -1.9959e+00],
         [ 4.5024e+01,  5.6520e+00, -6.0063e-01],
         [ 4.5057e+01,  7.1735e+00, -5.9921e-01],
         [ 4.8678e+01,  7.0954e+00, -5.9320e-01],
         [ 4.8645e+01,  5.5738e+00, -5.9461e-01]],

        [[ 5.2460e+01, -2.1653e+00, -1.5962e+00],
         [ 5.2293e+01, -3.8763e+00, -1.5980e+00],
         [ 4.8480e+01, -3.5054e+00, -1.6040e+00],
         [ 4.8646e+01, -1.7944e+00, -1.6022e+00],
         [ 5.2457e+01, -2.1667e+00,  1.2145e-02],
         [ 5.2291e+01, -3.8778e+00,  1.0333e-02],
         [ 4.8477e+01, -3.5068e+00,  4.2552e-03],
         [ 4.8644e+01, -1.7958e+00,  6.0669e-03]],

        [[ 5.0228e+01,  5.6031e+00, -1.9252e+00],
         [ 5.0228e+01,  7.3096e+00, -1.9237e+00],
         [ 5.4160e+01,  7.3105e+00, -1.9170e+00],
         [ 5.4161e+01,  5.6040e+00, -1.9186e+00],
         [ 5.0226e+01,  5.6018e+00, -4.1538e-01],
         [ 5.0225e+01,  7.3083e+00, -4.1385e-01],
         [ 5.4158e+01,  7.3092e+00, -4.0724e-01],
         [ 5.4158e+01,  5.6027e+00, -4.0877e-01]],

        [[ 4.7249e+01,  1.1490e+01, -1.9730e+00],
         [ 4.7463e+01,  9.9958e+00, -1.9740e+00],
         [ 4.3996e+01,  9.5011e+00, -1.9803e+00],
         [ 4.3782e+01,  1.0995e+01, -1.9793e+00],
         [ 4.7247e+01,  1.1488e+01, -4.6982e-01],
         [ 4.7460e+01,  9.9944e+00, -4.7080e-01],
         [ 4.3993e+01,  9.4997e+00, -4.7707e-01],
         [ 4.3780e+01,  1.0994e+01, -4.7609e-01]],

        [[ 3.2419e+01, -7.5826e+00, -1.5643e+00],
         [ 3.2372e+01, -8.1856e+00, -1.5650e+00],
         [ 3.1860e+01, -8.1454e+00, -1.5658e+00],
         [ 3.1908e+01, -7.5423e+00, -1.5652e+00],
         [ 3.2416e+01, -7.5841e+00,  1.0155e-01],
         [ 3.2369e+01, -8.1871e+00,  1.0093e-01],
         [ 3.1858e+01, -8.1468e+00,  1.0010e-01],
         [ 3.1905e+01, -7.5438e+00,  1.0072e-01]],

        [[ 4.1134e+01, -6.4330e+00, -1.3882e+00],
         [ 4.1324e+01, -4.7682e+00, -1.3864e+00],
         [ 4.5697e+01, -5.2687e+00, -1.3795e+00],
         [ 4.5506e+01, -6.9335e+00, -1.3813e+00],
         [ 4.1131e+01, -6.4344e+00,  1.8271e-01],
         [ 4.1321e+01, -4.7696e+00,  1.8452e-01],
         [ 4.5694e+01, -5.2701e+00,  1.9142e-01],
         [ 4.5503e+01, -6.9350e+00,  1.8961e-01]],

        [[ 3.3396e+00, -1.2731e+00, -1.7540e+00],
         [ 2.4083e+00, -2.6136e+00, -1.7568e+00],
         [-8.9948e-01, -3.1564e-01, -1.7603e+00],
         [ 3.1815e-02,  1.0249e+00, -1.7575e+00],
         [ 3.3371e+00, -1.2744e+00, -2.4930e-01],
         [ 2.4058e+00, -2.6150e+00, -2.5207e-01],
         [-9.0201e-01, -3.1698e-01, -2.5557e-01],
         [ 2.9286e-02,  1.0236e+00, -2.5281e-01]],

        [[ 1.8435e+01, -1.3468e+01, -1.1954e+00],
         [ 1.7778e+01, -1.3566e+01, -1.1966e+00],
         [ 1.7533e+01, -1.1933e+01, -1.1956e+00],
         [ 1.8190e+01, -1.1834e+01, -1.1944e+00],
         [ 1.8432e+01, -1.3470e+01,  6.6705e-01],
         [ 1.7775e+01, -1.3568e+01,  6.6586e-01],
         [ 1.7530e+01, -1.1935e+01,  6.6691e-01],
         [ 1.8187e+01, -1.1836e+01,  6.6810e-01]],


        ])
ref_corners3d=ref_3d.numpy()

labels=torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
ref_labels=labels.numpy()

scores=torch.tensor([0.9999, 0.9998, 0.9942, 0.9937, 0.9893, 0.8851, 0.6217, 0.4062, 0.2369,
        0.1292,0.9997, 0.9996, 0.9981, 0.9913, 0.9740, 0.9107, 0.4947, 0.3839, 0.2983,0.1340, 0.1290, 0.1128])
ref_scores=scores.numpy()

args, cfg = demo.parse_config()
logger = common_utils.create_logger()
demo_dataset = demo.DemoDataset(
    dataset_cfg=cfg.DATA_CONFIG, class_names=cfg.CLASS_NAMES, training=False,
    root_path=Path(args.data_path), ext=args.ext, logger=logger
)
for idx, data_dict in enumerate(demo_dataset):
    data_dict = demo_dataset.collate_batch([data_dict])
    load_data_to_gpu(data_dict)
    points=data_dict['points']
    print(points)
    if not isinstance(points, np.ndarray):
        points = points.cpu().numpy()
        #print(points)
    fig = V.visualize_pts(points)
    fig = V.draw_multi_grid_range(fig, bv_range=(0, -40, 80, 40))
    for k in range(ref_labels.min(), ref_labels.max() + 1):
        cur_color = tuple(V.box_colormap[k % len(V.box_colormap)])
        mask = (ref_labels == k)
        fig = V.draw_corners3d(ref_corners3d[mask], fig=fig, color=cur_color, cls=ref_scores[mask], max_num=100)
        mlab.view(azimuth=-179, elevation=54.0, distance=104.0, roll=90.0)
    mlab.show(stop=True)