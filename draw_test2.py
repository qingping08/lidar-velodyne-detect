import mayavi.mlab as mlab
import numpy as np
import torch
from pcdet.config import cfg, cfg_from_yaml_file
from pcdet.datasets import DatasetTemplate
from pcdet.models import build_network, load_data_to_gpu
from pcdet.utils import common_utils
from visual_utils import visualize_utils as V
import argparse
import glob
from pathlib import Path
import demo

box_colormap = [
    [1, 1, 1],
    [0, 1, 0],
    [0, 1, 1],
    [1, 1, 0],
]

""" def visualize_pts(pts, fig=None, bgcolor=(0, 0, 0), fgcolor=(1.0, 1.0, 1.0),
                  show_intensity=False, size=(600, 600), draw_origin=True):
    if not isinstance(pts, np.ndarray):
        pts = pts.cpu().numpy()
    if fig is None:
        fig = mlab.figure(figure=None, bgcolor=bgcolor, fgcolor=fgcolor, engine=None, size=size)

    if show_intensity:
        G = mlab.points3d(pts[:, 0], pts[:, 1], pts[:, 2], pts[:, 3], mode='point',
                          colormap='gnuplot', scale_factor=1, figure=fig)
    else:
        G = mlab.points3d(pts[:, 0], pts[:, 1], pts[:, 2], mode='point',
                          colormap='gnuplot', scale_factor=1, figure=fig)
    if draw_origin:
        mlab.points3d(0, 0, 0, color=(1, 1, 1), mode='cube', scale_factor=0.2)
        mlab.plot3d([0, 3], [0, 0], [0, 0], color=(0, 0, 1), tube_radius=0.1)
        mlab.plot3d([0, 0], [0, 3], [0, 0], color=(0, 1, 0), tube_radius=0.1)
        mlab.plot3d([0, 0], [0, 0], [0, 3], color=(1, 0, 0), tube_radius=0.1)

    return fig """
""" def parse_config():
    parser = argparse.ArgumentParser(description='arg parser')
    parser.add_argument('--cfg_file', type=str, default='cfgs/kitti_models/second.yaml',
                        help='specify the config for demo')
    parser.add_argument('--data_path', type=str, default='demo_data',
                        help='specify the point cloud data file or directory')
    parser.add_argument('--ckpt', type=str, default=None, help='specify the pretrained model')
    parser.add_argument('--ext', type=str, default='.bin', help='specify the extension of your point cloud data file')

    args = parser.parse_args()

    cfg_from_yaml_file(args.cfg_file, cfg)

    return args, cfg """
def visualize_pts( fig=None, bgcolor=(0, 0, 0), fgcolor=(1.0, 1.0, 1.0),
                  show_intensity=False, size=(600, 600), draw_origin=True):
    if fig is None:
        fig = mlab.figure(figure=None, bgcolor=bgcolor, fgcolor=fgcolor, engine=None, size=size)
    return fig

def draw_grid(x1, y1, x2, y2, fig, tube_radius=None, color=(0.5, 0.5, 0.5)):
    mlab.plot3d([x1, x1], [y1, y2], [0, 0], color=color, tube_radius=tube_radius, line_width=1, figure=fig)
    mlab.plot3d([x2, x2], [y1, y2], [0, 0], color=color, tube_radius=tube_radius, line_width=1, figure=fig)
    mlab.plot3d([x1, x2], [y1, y1], [0, 0], color=color, tube_radius=tube_radius, line_width=1, figure=fig)
    mlab.plot3d([x1, x2], [y2, y2], [0, 0], color=color, tube_radius=tube_radius, line_width=1, figure=fig)
    return fig

def draw_multi_grid_range(fig, grid_size=20, bv_range=(-60, -60, 60, 60)):
    for x in range(bv_range[0], bv_range[2], grid_size):
        for y in range(bv_range[1], bv_range[3], grid_size):
            fig = draw_grid(x, y, x + grid_size, y + grid_size, fig)

    return fig


def draw_corners3d(corners3d, fig, color=(1, 1, 1), line_width=2, cls=None, tag='', max_num=500, tube_radius=None):
    """
    :param corners3d: (N, 8, 3)
    :param fig:
    :param color:
    :param line_width:
    :param cls:
    :param tag:
    :param max_num:
    :return:
    """
    import mayavi.mlab as mlab
    num = min(max_num, len(corners3d))
    for n in range(num):
        b = corners3d[n]  # (8, 3)

        if cls is not None:
            if isinstance(cls, np.ndarray):
                mlab.text3d(b[6, 0], b[6, 1], b[6, 2], '%.2f' % cls[n], scale=(0.3, 0.3, 0.3), color=color, figure=fig)
            else:
                mlab.text3d(b[6, 0], b[6, 1], b[6, 2], '%s' % cls[n], scale=(0.3, 0.3, 0.3), color=color, figure=fig)

        for k in range(0, 4):
            i, j = k, (k + 1) % 4
            mlab.plot3d([b[i, 0], b[j, 0]], [b[i, 1], b[j, 1]], [b[i, 2], b[j, 2]], color=color, tube_radius=tube_radius,
                        line_width=line_width, figure=fig)

            i, j = k + 4, (k + 1) % 4 + 4
            mlab.plot3d([b[i, 0], b[j, 0]], [b[i, 1], b[j, 1]], [b[i, 2], b[j, 2]], color=color, tube_radius=tube_radius,
                        line_width=line_width, figure=fig)

            i, j = k, k + 4
            mlab.plot3d([b[i, 0], b[j, 0]], [b[i, 1], b[j, 1]], [b[i, 2], b[j, 2]], color=color, tube_radius=tube_radius,
                        line_width=line_width, figure=fig)

        i, j = 0, 5
        mlab.plot3d([b[i, 0], b[j, 0]], [b[i, 1], b[j, 1]], [b[i, 2], b[j, 2]], color=color, tube_radius=tube_radius,
                    line_width=line_width, figure=fig)
        i, j = 1, 4
        mlab.plot3d([b[i, 0], b[j, 0]], [b[i, 1], b[j, 1]], [b[i, 2], b[j, 2]], color=color, tube_radius=tube_radius,
                    line_width=line_width, figure=fig)

    return fig

ref_3d=torch.tensor([
    #158
    [[  1.1417,   5.1776,  -1.8744],
         [  1.0256,   6.6197,  -1.8744],
         [  4.5363,   6.9022,  -1.8744],
         [  4.6524,   5.4601,  -1.8744],
         [  1.1417,   5.1776,  -0.4232],
         [  1.0256,   6.6197,  -0.4232],
         [  4.5363,   6.9022,  -0.4232],
         [  4.6524,   5.4601,  -0.4232]],

        [[ 26.7328,  -8.4836,  -1.2576],
         [ 28.2236,  -8.4580,  -1.2576],
         [ 28.2820, -11.8719,  -1.2576],
         [ 26.7912, -11.8974,  -1.2576],
         [ 26.7328,  -8.4836,   0.1320],
         [ 28.2236,  -8.4580,   0.1320],
         [ 28.2820, -11.8719,   0.1320],
         [ 26.7912, -11.8974,   0.1320]],

        [[ 35.4683,  18.7528,  -1.8146],
         [ 34.4432,  19.8730,  -1.8146],
         [ 36.6961,  21.9346,  -1.8146],
         [ 37.7212,  20.8144,  -1.8146],
         [ 35.4683,  18.7528,  -0.3676],
         [ 34.4432,  19.8730,  -0.3676],
         [ 36.6961,  21.9346,  -0.3676],
         [ 37.7212,  20.8144,  -0.3676]],

        [[  4.3960,  -2.0863,  -1.6744],
         [  4.4795,  -3.6330,  -1.6744],
         [  0.6078,  -3.8419,  -1.6744],
         [  0.5243,  -2.2952,  -1.6744],
         [  4.3960,  -2.0863,  -0.3102],
         [  4.4795,  -3.6330,  -0.3102],
         [  0.6078,  -3.8419,  -0.3102],
         [  0.5243,  -2.2952,  -0.3102]],

        [[ 26.1346,  22.2073,  -2.1823],
         [ 27.7857,  22.1804,  -2.1823],
         [ 27.7272,  18.5941,  -2.1823],
         [ 26.0761,  18.6210,  -2.1823],
         [ 26.1346,  22.2073,  -0.7805],
         [ 27.7857,  22.1804,  -0.7805],
         [ 27.7272,  18.5941,  -0.7805],
         [ 26.0761,  18.6210,  -0.7805]],

        [[ 20.1034, -25.9484,  -0.9247],
         [ 18.4793, -26.0108,  -0.9247],
         [ 18.3208, -21.8864,  -0.9247],
         [ 19.9448, -21.8240,  -0.9247],
         [ 20.1034, -25.9484,   0.5367],
         [ 18.4793, -26.0108,   0.5367],
         [ 18.3208, -21.8864,   0.5367],
         [ 19.9448, -21.8240,   0.5367]],

        [[  4.4948,  13.8017,  -1.9008],
         [  3.0036,  13.7596,  -1.9008],
         [  2.9020,  17.3597,  -1.9008],
         [  4.3932,  17.4018,  -1.9008],
         [  4.4948,  13.8017,  -0.5940],
         [  3.0036,  13.7596,  -0.5940],
         [  2.9020,  17.3597,  -0.5940],
         [  4.3932,  17.4018,  -0.5940]],

        [[ 35.6129,  12.1530,  -1.5601],
         [ 34.3890,  13.2143,  -1.5601],
         [ 36.9793,  16.2014,  -1.5601],
         [ 38.2032,  15.1401,  -1.5601],
         [ 35.6129,  12.1530,  -0.1187],
         [ 34.3890,  13.2143,  -0.1187],
         [ 36.9793,  16.2014,  -0.1187],
         [ 38.2032,  15.1401,  -0.1187]],

        [[ 28.8922, -16.8787,  -1.3173],
         [ 27.3100, -17.1986,  -1.3173],
         [ 26.5010, -13.1979,  -1.3173],
         [ 28.0832, -12.8780,  -1.3173],
         [ 28.8922, -16.8787,   0.0515],
         [ 27.3100, -17.1986,   0.0515],
         [ 26.5010, -13.1979,   0.0515],
         [ 28.0832, -12.8780,   0.0515]],

        [[ 19.3039,  14.5841,  -2.0399],
         [ 17.7957,  14.4699,  -2.0399],
         [ 17.4852,  18.5689,  -2.0399],
         [ 18.9933,  18.6831,  -2.0399],
         [ 19.3039,  14.5841,  -0.6942],
         [ 17.7957,  14.4699,  -0.6942],
         [ 17.4852,  18.5689,  -0.6942],
         [ 18.9933,  18.6831,  -0.6942]],

        [[  2.3640,  13.8535,  -2.0231],
         [  0.8649,  13.7529,  -2.0231],
         [  0.6328,  17.2111,  -2.0231],
         [  2.1319,  17.3117,  -2.0231],
         [  2.3640,  13.8535,  -0.6373],
         [  0.8649,  13.7529,  -0.6373],
         [  0.6328,  17.2111,  -0.6373],
         [  2.1319,  17.3117,  -0.6373]],

        [[  8.8471,  -5.0835,  -1.4160],
         [  8.7321,  -5.6560,  -1.4160],
         [  7.8109,  -5.4709,  -1.4160],
         [  7.9259,  -4.8984,  -1.4160],
         [  8.8471,  -5.0835,   0.4392],
         [  8.7321,  -5.6560,   0.4392],
         [  7.8109,  -5.4709,   0.4392],
         [  7.9259,  -4.8984,   0.4392]],

        [[ 44.5607,  17.8347,  -0.5669],
         [ 46.2024,  18.0280,  -0.5669],
         [ 46.6447,  14.2711,  -0.5669],
         [ 45.0030,  14.0778,  -0.5669],
         [ 44.5607,  17.8347,   1.0476],
         [ 46.2024,  18.0280,   1.0476],
         [ 46.6447,  14.2711,   1.0476],
         [ 45.0030,  14.0778,   1.0476]],

        [[ 26.1729,  15.1485,  -1.9422],
         [ 28.0152,  15.1052,  -1.9422],
         [ 27.9047,  10.4031,  -1.9422],
         [ 26.0624,  10.4464,  -1.9422],
         [ 26.1729,  15.1485,   0.0556],
         [ 28.0152,  15.1052,   0.0556],
         [ 27.9047,  10.4031,   0.0556],
         [ 26.0624,  10.4464,   0.0556]],

        [[ 34.6017,  20.9076,  -1.9137],
         [ 33.5376,  22.1721,  -1.9137],
         [ 36.6688,  24.8068,  -1.9137],
         [ 37.7328,  23.5423,  -1.9137],
         [ 34.6017,  20.9076,  -0.4887],
         [ 33.5376,  22.1721,  -0.4887],
         [ 36.6688,  24.8068,  -0.4887],
         [ 37.7328,  23.5423,  -0.4887]],

        [[  9.2066,  -4.6585,  -1.4627],
         [  8.9345,  -5.1963,  -1.4627],
         [  8.0816,  -4.7649,  -1.4627],
         [  8.3537,  -4.2271,  -1.4627],
         [  9.2066,  -4.6585,   0.4005],
         [  8.9345,  -5.1963,   0.4005],
         [  8.0816,  -4.7649,   0.4005],
         [  8.3537,  -4.2271,   0.4005]],

        [[ 38.1324,   4.7710,  -1.3481],
         [ 37.8824,   4.1455,  -1.3481],
         [ 37.2928,   4.3812,  -1.3481],
         [ 37.5428,   5.0067,  -1.3481],
         [ 38.1324,   4.7710,   0.4807],
         [ 37.8824,   4.1455,   0.4807],
         [ 37.2928,   4.3812,   0.4807],
         [ 37.5428,   5.0067,   0.4807]],

        [[ 21.1429,  29.7008,  -1.7314],
         [ 20.6946,  31.1007,  -1.7314],
         [ 24.1881,  32.2194,  -1.7314],
         [ 24.6364,  30.8195,  -1.7314],
         [ 21.1429,  29.7008,  -0.2476],
         [ 20.6946,  31.1007,  -0.2476],
         [ 24.1881,  32.2194,  -0.2476],
         [ 24.6364,  30.8195,  -0.2476]],

        [[ 11.3195,  27.8817,  -2.1443],
         [ 11.2767,  26.2836,  -2.1443],
         [  7.4881,  26.3851,  -2.1443],
         [  7.5309,  27.9832,  -2.1443],
         [ 11.3195,  27.8817,  -0.7195],
         [ 11.2767,  26.2836,  -0.7195],
         [  7.4881,  26.3851,  -0.7195],
         [  7.5309,  27.9832,  -0.7195]],

        [[ -1.5455,  -2.4649,  -1.7144],
         [ -2.1236,  -0.9458,  -1.7144],
         [  1.3625,   0.3807,  -1.7144],
         [  1.9406,  -1.1384,  -1.7144],
         [ -1.5455,  -2.4649,  -0.2180],
         [ -2.1236,  -0.9458,  -0.2180],
         [  1.3625,   0.3807,  -0.2180],
         [  1.9406,  -1.1384,  -0.2180]],

        [[ 20.1528, -15.1973,  -1.2271],
         [ 18.5557, -15.4110,  -1.2271],
         [ 18.1062, -12.0521,  -1.2271],
         [ 19.7033, -11.8384,  -1.2271],
         [ 20.1528, -15.1973,   0.2835],
         [ 18.5557, -15.4110,   0.2835],
         [ 18.1062, -12.0521,   0.2835],
         [ 19.7033, -11.8384,   0.2835]],

        [[ 44.6742,  23.0092,  -1.1516],
         [ 44.6289,  24.5724,  -1.1516],
         [ 48.3370,  24.6800,  -1.1516],
         [ 48.3823,  23.1168,  -1.1516],
         [ 44.6742,  23.0092,   0.3483],
         [ 44.6289,  24.5724,   0.3483],
         [ 48.3370,  24.6800,   0.3483],
         [ 48.3823,  23.1168,   0.3483]],

         [[ 2.6137e+01,  3.7895e+01, -2.3214e+00],
         [ 2.7775e+01,  3.7849e+01, -2.3328e+00],
         [ 2.7660e+01,  3.3813e+01, -2.2217e+00],
         [ 2.6023e+01,  3.3860e+01, -2.2104e+00],
         [ 2.6148e+01,  3.7934e+01, -8.9620e-01],
         [ 2.7786e+01,  3.7888e+01, -9.0755e-01],
         [ 2.7671e+01,  3.3852e+01, -7.9651e-01],
         [ 2.6034e+01,  3.3898e+01, -7.8516e-01]],

        [[ 2.6165e+01,  2.2255e+01, -1.8858e+00],
         [ 2.7781e+01,  2.2248e+01, -1.8981e+00],
         [ 2.7767e+01,  1.8526e+01, -1.7964e+00],
         [ 2.6151e+01,  1.8533e+01, -1.7841e+00],
         [ 2.6176e+01,  2.2293e+01, -4.6352e-01],
         [ 2.7792e+01,  2.2287e+01, -4.7580e-01],
         [ 2.7778e+01,  1.8565e+01, -3.7411e-01],
         [ 2.6162e+01,  1.8572e+01, -3.6182e-01]],

        [[ 3.3099e+01,  3.5094e+01, -1.9578e+00],
         [ 3.4151e+01,  3.6370e+01, -2.0008e+00],
         [ 3.7088e+01,  3.3951e+01, -1.9574e+00],
         [ 3.6036e+01,  3.2675e+01, -1.9144e+00],
         [ 3.3111e+01,  3.5135e+01, -4.4241e-01],
         [ 3.4163e+01,  3.6412e+01, -4.8537e-01],
         [ 3.7100e+01,  3.3993e+01, -4.4198e-01],
         [ 3.6047e+01,  3.2716e+01, -3.9902e-01]],

        [[ 1.9563e+01,  1.4508e+01, -1.7361e+00],
         [ 1.7892e+01,  1.4418e+01, -1.7207e+00],
         [ 1.7650e+01,  1.8855e+01, -1.8400e+00],
         [ 1.9321e+01,  1.8946e+01, -1.8554e+00],
         [ 1.9574e+01,  1.4545e+01, -3.7564e-01],
         [ 1.7903e+01,  1.4455e+01, -3.6027e-01],
         [ 1.7661e+01,  1.8892e+01, -4.7954e-01],
         [ 1.9332e+01,  1.8983e+01, -4.9490e-01]],

        [[ 2.6390e+01,  4.3588e+01, -2.4958e+00],
         [ 2.8002e+01,  4.3496e+01, -2.5057e+00],
         [ 2.7774e+01,  3.9510e+01, -2.3951e+00],
         [ 2.6162e+01,  3.9603e+01, -2.3852e+00],
         [ 2.6401e+01,  4.3629e+01, -1.0068e+00],
         [ 2.8013e+01,  4.3537e+01, -1.0167e+00],
         [ 2.7785e+01,  3.9551e+01, -9.0614e-01],
         [ 2.6173e+01,  3.9643e+01, -8.9623e-01]],

        [[ 1.1890e+01,  2.0723e+01, -1.7693e+00],
         [ 1.1994e+01,  1.8978e+01, -1.7225e+00],
         [ 7.8083e+00,  1.8729e+01, -1.6834e+00],
         [ 7.7041e+00,  2.0474e+01, -1.7303e+00],
         [ 1.1901e+01,  2.0763e+01, -3.1972e-01],
         [ 1.2005e+01,  1.9018e+01, -2.7289e-01],
         [ 7.8194e+00,  1.8769e+01, -2.3382e-01],
         [ 7.7153e+00,  2.0514e+01, -2.8065e-01]],

        [[ 1.9437e+01,  1.9717e+01, -1.9312e+00],
         [ 1.7809e+01,  1.9647e+01, -1.9168e+00],
         [ 1.7644e+01,  2.3479e+01, -2.0201e+00],
         [ 1.9272e+01,  2.3549e+01, -2.0346e+00],
         [ 1.9448e+01,  1.9757e+01, -4.6921e-01],
         [ 1.7820e+01,  1.9687e+01, -4.5475e-01],
         [ 1.7655e+01,  2.3519e+01, -5.5808e-01],
         [ 1.9284e+01,  2.3589e+01, -5.7254e-01]],

        [[ 1.9808e+01,  4.9667e+01, -2.9226e+00],
         [ 1.8142e+01,  4.9743e+01, -2.9118e+00],
         [ 1.8310e+01,  5.3413e+01, -3.0133e+00],
         [ 1.9975e+01,  5.3337e+01, -3.0241e+00],
         [ 1.9820e+01,  4.9711e+01, -1.3328e+00],
         [ 1.8155e+01,  4.9787e+01, -1.3221e+00],
         [ 1.8322e+01,  5.3457e+01, -1.4235e+00],
         [ 1.9987e+01,  5.3381e+01, -1.4343e+00]],

        [[ 3.2644e+01,  4.1546e+01, -2.3105e+00],
         [ 3.3595e+01,  4.2751e+01, -2.3507e+00],
         [ 3.6819e+01,  4.0206e+01, -2.3061e+00],
         [ 3.5868e+01,  3.9001e+01, -2.2659e+00],
         [ 3.2656e+01,  4.1588e+01, -7.8931e-01],
         [ 3.3607e+01,  4.2792e+01, -8.2952e-01],
         [ 3.6831e+01,  4.0248e+01, -7.8492e-01],
         [ 3.5880e+01,  3.9043e+01, -7.4470e-01]],

        [[ 3.4838e+01,  2.0869e+01, -1.6851e+00],
         [ 3.3536e+01,  2.1948e+01, -1.7045e+00],
         [ 3.6346e+01,  2.5337e+01, -1.8187e+00],
         [ 3.7649e+01,  2.4258e+01, -1.7992e+00],
         [ 3.4850e+01,  2.0912e+01, -1.0649e-01],
         [ 3.3548e+01,  2.1991e+01, -1.2591e-01],
         [ 3.6359e+01,  2.5381e+01, -2.4010e-01],
         [ 3.7661e+01,  2.4301e+01, -2.2068e-01]],

        [[ 2.8531e+01,  7.2092e+01, -3.2897e+00],
         [ 3.0203e+01,  7.1902e+01, -3.2974e+00],
         [ 2.9738e+01,  6.7804e+01, -3.1820e+00],
         [ 2.8066e+01,  6.7994e+01, -3.1743e+00],
         [ 2.8543e+01,  7.2133e+01, -1.8014e+00],
         [ 3.0215e+01,  7.1943e+01, -1.8091e+00],
         [ 2.9750e+01,  6.7845e+01, -1.6937e+00],
         [ 2.8078e+01,  6.8035e+01, -1.6860e+00]],

        [[ 2.0119e+01,  5.4712e+01, -3.0065e+00],
         [ 1.8578e+01,  5.5010e+01, -3.0028e+00],
         [ 1.9344e+01,  5.8980e+01, -3.1171e+00],
         [ 2.0885e+01,  5.8683e+01, -3.1208e+00],
         [ 2.0130e+01,  5.4754e+01, -1.4906e+00],
         [ 1.8589e+01,  5.5051e+01, -1.4869e+00],
         [ 1.9356e+01,  5.9022e+01, -1.6012e+00],
         [ 2.0897e+01,  5.8724e+01, -1.6049e+00]],

        [[ 4.2212e+01,  1.1199e+01, -1.1194e+00],
         [ 4.0591e+01,  1.1131e+01, -1.1051e+00],
         [ 4.0426e+01,  1.5052e+01, -1.2108e+00],
         [ 4.2046e+01,  1.5120e+01, -1.2252e+00],
         [ 4.2224e+01,  1.1241e+01,  4.3517e-01],
         [ 4.0603e+01,  1.1173e+01,  4.4951e-01],
         [ 4.0438e+01,  1.5095e+01,  3.4374e-01],
         [ 4.2058e+01,  1.5163e+01,  3.2940e-01]],

        [[ 1.1273e+01,  2.3061e+01, -1.7883e+00],
         [ 1.1252e+01,  2.1535e+01, -1.7465e+00],
         [ 7.4499e+00,  2.1589e+01, -1.7186e+00],
         [ 7.4711e+00,  2.3114e+01, -1.7604e+00],
         [ 1.1284e+01,  2.3099e+01, -3.9203e-01],
         [ 1.1262e+01,  2.1573e+01, -3.5022e-01],
         [ 7.4607e+00,  2.1627e+01, -3.2237e-01],
         [ 7.4819e+00,  2.3152e+01, -3.6418e-01]],

        [[ 2.6181e+01,  1.5015e+01, -1.6486e+00],
         [ 2.7874e+01,  1.4989e+01, -1.6609e+00],
         [ 2.7804e+01,  1.0310e+01, -1.5327e+00],
         [ 2.6110e+01,  1.0336e+01, -1.5203e+00],
         [ 2.6196e+01,  1.5070e+01,  3.7481e-01],
         [ 2.7889e+01,  1.5044e+01,  3.6246e-01],
         [ 2.7819e+01,  1.0365e+01,  4.9072e-01],
         [ 2.6126e+01,  1.0391e+01,  5.0307e-01]],

        [[ 3.8145e+01,  3.6540e+01, -2.0645e+00],
         [ 3.7276e+01,  3.5255e+01, -2.0227e+00],
         [ 3.3728e+01,  3.7652e+01, -2.0608e+00],
         [ 3.4597e+01,  3.8937e+01, -2.1026e+00],
         [ 3.8156e+01,  3.6578e+01, -6.5505e-01],
         [ 3.7287e+01,  3.5293e+01, -6.1328e-01],
         [ 3.3739e+01,  3.7691e+01, -6.5137e-01],
         [ 3.4608e+01,  3.8976e+01, -6.9315e-01]],

        #[[ 3.1458e+00,  1.4395e+01, -1.6044e+00],
        # [ 2.7193e+00,  1.5974e+01, -1.6442e+00],
        # [ 6.9294e+00,  1.7109e+01, -1.7077e+00],
         #[ 7.3559e+00,  1.5530e+01, -1.6678e+00],
         #[ 3.1569e+00,  1.4434e+01, -1.6077e-01],
         #[ 2.7304e+00,  1.6013e+01, -2.0060e-01],
         #[ 6.9406e+00,  1.7149e+01, -2.6405e-01],
         #[ 7.3671e+00,  1.5569e+01, -2.2423e-01]],

        [[-2.2664e+00,  1.7517e+01, -1.5393e+00],
         [-6.5375e-01,  1.7916e+01, -1.5627e+00],
         [ 3.8314e-01,  1.3730e+01, -1.4564e+00],
         [-1.2295e+00,  1.3331e+01, -1.4331e+00],
         [-2.2544e+00,  1.7559e+01,  8.4361e-03],
         [-6.4181e-01,  1.7958e+01, -1.4888e-02],
         [ 3.9507e-01,  1.3773e+01,  9.1361e-02],
         [-1.2176e+00,  1.3374e+01,  1.1468e-01]],

        [[ 1.0323e+01,  5.7225e+01, -2.9620e+00],
         [ 1.0438e+01,  5.5533e+01, -2.9167e+00],
         [ 6.3791e+00,  5.5257e+01, -2.8779e+00],
         [ 6.2638e+00,  5.6950e+01, -2.9232e+00],
         [ 1.0335e+01,  5.7268e+01, -1.4111e+00],
         [ 1.0450e+01,  5.5575e+01, -1.3657e+00],
         [ 6.3911e+00,  5.5299e+01, -1.3269e+00],
         [ 6.2758e+00,  5.6992e+01, -1.3722e+00]],

        [[ 4.6184e+01,  3.6458e+01, -1.8151e+00],
         [ 4.6342e+01,  3.4861e+01, -1.7727e+00],
         [ 4.2674e+01,  3.4500e+01, -1.7346e+00],
         [ 4.2517e+01,  3.6097e+01, -1.7769e+00],
         [ 4.6195e+01,  3.6499e+01, -3.1838e-01],
         [ 4.6353e+01,  3.4902e+01, -2.7600e-01],
         [ 4.2686e+01,  3.4541e+01, -2.3786e-01],
         [ 4.2528e+01,  3.6138e+01, -2.8024e-01]],

        [[ 4.5138e+01,  3.1466e+01, -1.6831e+00],
         [ 4.5656e+01,  3.0998e+01, -1.6743e+00],
         [ 4.5211e+01,  3.0505e+01, -1.6574e+00],
         [ 4.4692e+01,  3.0973e+01, -1.6662e+00],
         [ 4.5151e+01,  3.1514e+01,  5.6603e-02],
         [ 4.5670e+01,  3.1046e+01,  6.5374e-02],
         [ 4.5224e+01,  3.0552e+01,  8.2280e-02],
         [ 4.4706e+01,  3.1020e+01,  7.3509e-02]],

        [[-9.4668e+00,  3.5880e+01, -1.9540e+00],
         [-1.1051e+01,  3.5604e+01, -1.9342e+00],
         [-1.1724e+01,  3.9459e+01, -2.0343e+00],
         [-1.0140e+01,  3.9735e+01, -2.0540e+00],
         [-9.4551e+00,  3.5921e+01, -4.4237e-01],
         [-1.1039e+01,  3.5645e+01, -4.2262e-01],
         [-1.1712e+01,  3.9501e+01, -5.2267e-01],
         [-1.0128e+01,  3.9777e+01, -5.4242e-01]],

        [[ 7.9996e+00,  2.6999e+01, -1.8866e+00],
         [ 8.5213e+00,  2.6637e+01, -1.8807e+00],
         [ 8.1555e+00,  2.6110e+01, -1.8635e+00],
         [ 7.6338e+00,  2.6472e+01, -1.8694e+00],
         [ 8.0125e+00,  2.7045e+01, -2.1356e-01],
         [ 8.5342e+00,  2.6683e+01, -2.0771e-01],
         [ 8.1684e+00,  2.6156e+01, -1.9050e-01],
         [ 7.6467e+00,  2.6517e+01, -1.9634e-01]],

        [[-8.1390e+00,  3.9124e+01, -2.4676e+00],
         [-8.4697e+00,  4.0620e+01, -2.5059e+00],
         [-4.8703e+00,  4.1415e+01, -2.5554e+00],
         [-4.5397e+00,  3.9919e+01, -2.5171e+00],
         [-8.1276e+00,  3.9165e+01, -9.8783e-01],
         [-8.4583e+00,  4.0661e+01, -1.0261e+00],
         [-4.8589e+00,  4.1455e+01, -1.0756e+00],
         [-4.5282e+00,  3.9959e+01, -1.0373e+00]]

        ])
ref_corners3d=ref_3d.numpy()

labels=torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,##158
    # 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])#211
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,  2, 2, 2, 2, 2, 2])#233
ref_labels=labels.numpy()

scores=torch.tensor([
        0.9992, 0.9948, 0.9808, 0.9735, 0.9507, 0.9185, 0.9182, 0.8807, 0.8642,
        0.8617, 0.8553, 0.8406, 0.7874, 0.7245, 0.6912, 0.6684, 0.3689, 0.3567,
        0.2520, 0.2009, 0.1902, 0.1202,#158


        0.9997, 0.9993, 0.9993, 0.9992, 0.9973, 0.9932, 0.9905, 0.9806, 0.9776,
        0.9706, 0.9371, 0.9229, 0.9110, 0.8930, 0.7583, 0.7257, 
        #0.7074, 
        0.6582,
        0.3055, 0.2738, 0.2719, 0.1380, 0.1135, 0.1080])
ref_scores=scores.numpy()




########################         draw       scenes
""" args, cfg = demo.parse_config()
logger = common_utils.create_logger()
demo_dataset = demo.DemoDataset(
    dataset_cfg=cfg.DATA_CONFIG, class_names=cfg.CLASS_NAMES, training=False,
    root_path=Path(args.data_path), ext=args.ext, logger=logger
)
model = build_network(model_cfg=cfg.MODEL, num_class=len(cfg.CLASS_NAMES), dataset=demo_dataset)
model.load_params_from_file(filename=args.ckpt, logger=logger, to_cpu=True)
model.cuda()
model.eval()
for idx, data_dict in enumerate(demo_dataset):
    data_dict = demo_dataset.collate_batch([data_dict])
    load_data_to_gpu(data_dict)
    points=data_dict['points'][:, 1:]
    if not isinstance(points, np.ndarray):
        points = points.cpu().numpy()
    fig = visualize_pts(points)
    fig = draw_multi_grid_range(fig, bv_range=(0, -40, 80, 40))
    for k in range(ref_labels.min(), ref_labels.max() + 1):
        cur_color = tuple(box_colormap[k % len(box_colormap)])
        mask = (ref_labels == k)
        fig = draw_corners3d(ref_corners3d[mask], fig=fig, color=cur_color, cls=ref_scores[mask], max_num=100)
        mlab.view(azimuth=-179, elevation=54.0, distance=104.0, roll=90.0)
        mlab.show(stop=True) """


fig = visualize_pts()
fig = draw_multi_grid_range(fig, bv_range=(0, -40, 80, 40))
for k in range(ref_labels.min(), ref_labels.max() + 1):
    cur_color = tuple(box_colormap[k % len(box_colormap)])
    mask = (ref_labels == k)
    fig = draw_corners3d(ref_corners3d[mask], fig=fig, color=cur_color, cls=ref_scores[mask], max_num=100)
    mlab.view(azimuth=-179, elevation=54.0, distance=104.0, roll=90.0)
mlab.show(stop=True) 
def draw_scene(ref_labels,ref_corners3d,ref_scores):
    fig = visualize_pts()
    fig = draw_multi_grid_range(fig, bv_range=(0, -40, 80, 40))
    for k in range(ref_labels.min(), ref_labels.max() + 1):
        cur_color = tuple(box_colormap[k % len(box_colormap)])
        mask = (ref_labels == k)
        fig = draw_corners3d(ref_corners3d[mask], fig=fig, color=cur_color, cls=ref_scores[mask], max_num=100)
    mlab.show(stop=True)
    