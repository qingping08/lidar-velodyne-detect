import data_transform
import numpy
import torch
import visual_utils.visualize_utils
import IOU
#############    data begin
pred_dicts=[{'pred_boxes': torch.tensor([[  2.8390,   6.0399,  -1.1488,   3.5220,   1.4468,   1.4512,   3.2219],
        [ 27.5074, -10.1777,  -0.5628,   3.4143,   1.4910,   1.3895,   1.5879],
        [ 36.0822,  20.3437,  -1.0911,   3.0538,   1.5184,   1.4470,   3.8827],
        [  2.5019,  -2.9641,  -0.9923,   3.8773,   1.5490,   1.3641,   6.3371],
        [ 26.9309,  20.4007,  -1.4814,   3.5868,   1.6513,   1.4018,   1.5545],
        [ 19.2121, -23.9174,  -0.1940,   4.1275,   1.6252,   1.4613,   4.7508],
        [  3.6984,  15.5807,  -1.2474,   3.6016,   1.4918,   1.3068,   4.7406],
        [ 36.2961,  14.1772,  -0.8394,   3.9538,   1.6200,   1.4415,   3.9980],
        [ 27.6966, -15.0383,  -0.6329,   4.0817,   1.6142,   1.3688,   4.9119],
        [ 18.3945,  16.5765,  -1.3671,   4.1107,   1.5125,   1.3457,   4.7880],
        [  1.4984,  15.5323,  -1.3302,   3.4660,   1.5025,   1.3858,   4.7794],
        [  8.3290,  -5.2772,  -0.4884,   0.9396,   0.5840,   1.8553,   6.0849],
        [ 45.6027,  16.0529,   0.2404,   3.7828,   1.6530,   1.6145,   1.6880],
        [ 27.0388,  12.7758,  -0.9433,   4.7034,   1.8429,   1.9978,   1.5473],######################
        [ 35.6352,  22.8572,  -1.2012,   4.0921,   1.6526,   1.4249,   3.8411],
        [  8.6441,  -4.7117,  -0.5311,   0.9558,   0.6027,   1.8631,   5.8149],
        [ 37.7126,   4.5761,  -0.4337,   0.6349,   0.6736,   1.8288,   5.9030],
        [ 22.6655,  30.9601,  -0.9895,   3.6683,   1.4699,   1.4838,   3.4515],
        [  9.4038,  27.1334,  -1.4319,   3.7899,   1.5986,   1.4248,   6.2564],
        [ -0.0915,  -1.0421,  -0.9662,   3.7300,   1.6254,   1.4964,   3.5052],
        [ 19.1295, -13.6247,  -0.4718,   3.3889,   1.6113,   1.5107,   4.8454],
        [ 46.5056,  23.8446,  -0.4016,   3.7097,   1.5638,   1.4999,   3.1706]],
       device='cuda:0'), 'pred_scores': torch.tensor([0.9992, 0.9948, 0.9808, 0.9735, 0.9507, 0.9185, 0.9182, 0.8807, 0.8642,
        0.8617, 0.8553, 0.8406, 0.7874, 0.7245, 0.6912, 0.6684, 0.3689, 0.3567,
        0.2520, 0.2009, 0.1902, 0.1202], device='cuda:0'), 'pred_labels': torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1],
       device='cuda:0')}]
""" pred_dicts2=[{'pred_boxes': torch.tensor([[ 17.1379,  13.2210,  -1.1859,   3.8503,   1.6228,   1.3880,   1.0949],
        [ 22.7325,   3.0721,  -0.8665,   4.3251,   1.7151,   1.3650,   3.4562],
        [  3.5930, -14.5293,  -1.0567,   3.4619,   1.5602,   1.4020,   1.1150],
        [ 13.6240,   6.1634,  -0.8597,   4.5222,   1.8366,   2.0715,   1.0813],
        [ 30.7407,  21.9367,  -0.9417,   3.7448,   1.6188,   1.5487,   1.9811],
        [  7.9284,  13.5730,  -1.2574,   4.3231,   1.6892,   1.4267,   4.2864],
        [ 24.0697,  26.8866,  -1.2542,   3.9888,   1.7055,   1.4795,   1.0962],
        [ 23.0565,   5.6502,  -0.8310,   3.4957,   1.5558,   1.3690,   3.3503],
        [  1.2038, -18.9816,  -1.0034,   4.3900,   1.6843,   1.5041,   1.1899],
        [  4.0989,  27.2310,  -1.0821,   4.0885,   1.6701,   1.4501,   5.7857],
        [ 26.7970,  31.9189,  -1.1854,   4.1086,   1.6476,   1.4996,   1.0641],
        [ 10.3452,  18.9987,  -1.2649,   3.7626,   1.5470,   1.4891,   1.1690],
        [ 33.3383,  27.8996,  -1.1432,   3.7263,   1.6015,   1.4667,   1.9554],
        [ 19.3690,  -5.9820,  -0.6458,   0.6978,   0.5983,   1.7463,   2.2413],
        [ 32.8174,  24.1941,  -0.9924,   4.0000,   1.6455,   1.4527,   5.4409],
        [ 25.0886,  -8.6582,  -0.6412,   0.4780,   0.6728,   1.7331,   2.5107],
        [ 18.6478,  -4.5623,  -0.6742,   0.7165,   0.5443,   1.7639,   2.1167],
        [  0.7077,  15.5494,  -0.7821,   3.6581,   1.5466,   1.5302,   2.9331],
        [ 19.5371,  10.2865,  -1.1774,   3.7443,   1.6246,   1.4453,   3.6360]],
       device='cuda:0'), 'pred_scores': torch.tensor([0.9990, 0.9971, 0.9969, 0.9967, 0.9961, 0.9852, 0.9716, 0.9551, 0.9410,
        0.9242, 0.8748, 0.8113, 0.7894, 0.4059, 0.2836, 0.2643, 0.2169, 0.1336,
        0.1072], device='cuda:0'), 'pred_labels': torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1],
       device='cuda:0')}]  """
pred_dicts2=[{'pred_boxes': torch.tensor([[ 26.2744,   1.3753,  -1.0868,   4.0389,   1.6380,   1.4258,   6.4643],
        [ 11.1567,  -1.9061,  -1.0794,   3.7231,   1.6162,   1.4229,   6.4889],
        [ 26.6671,  -6.9164,  -0.7010,   3.8048,   1.6549,   1.5160,   1.0911],
        [  5.7911,   5.4986,  -1.2229,   4.4456,   1.6738,   1.3610,   3.4055],
        [ 31.8858,   2.3810,  -1.0719,   3.9936,   1.6150,   1.4896,   6.4355],
        [  6.9455,  14.6980,  -1.1011,   4.1936,   1.7489,   1.4502,   4.9814],
        [ 10.5897,   6.5858,  -1.2260,   3.8370,   1.6301,   1.4626,   3.3940],
        [ 40.0012,  12.3059,  -1.3330,   3.6753,   1.6670,   1.5904,   3.3055],
        [ 32.8140,  -5.2412,  -0.8781,   4.1075,   1.5354,   1.5218,   1.1120],
        [ 15.5999,  -9.7792,  -0.7715,   4.4046,   1.6912,   1.5792,   2.6589],
        [ 60.1017,   6.2791,  -1.0716,   4.1257,   1.6826,   1.4889,   6.3797],
        [ 45.3317,  12.7516,  -1.3138,   4.0451,   1.5694,   1.5165,   3.1604],
        [  7.0183, -17.4552,  -0.4251,   3.9264,   1.6219,   1.5552,   3.3931],
        [  9.3855,  15.7156,  -1.0877,   3.8023,   1.5264,   1.3968,   4.9079],
        [  3.5988,  -3.5390,  -0.7390,   4.6811,   1.6935,   2.0242,   6.4776],###############
        [ 29.3616,  -7.2059,  -0.7823,   4.2826,   1.5517,   1.4100,   4.3275],  
        [  2.0574,  18.5777,  -1.1793,   4.3610,   1.6364,   1.4442,   2.0439],
        [  0.6844,  24.3997,  -1.0187,   4.3131,   1.6614,   1.5484,   6.7354],
        [ 42.3701,  23.7573,  -1.2587,   4.0686,   1.6972,   1.5516,   4.9898],
        [ 29.5380, -15.8484,  -0.4296,   3.6852,   1.6055,   1.4973,   5.0202],
        [ 25.2964, -17.5118,  -0.3204,   0.6651,   0.6982,   1.7404,   5.7584],
        [ 20.2469,  38.4275,  -1.0057,   3.9149,   1.6082,   1.5122,   3.5238],
        [ 13.2577,  17.8511,  -0.9653,   0.6421,   0.6348,   1.6737,   5.8865],
        [ 23.6541,  34.9662,  -1.4363,   3.6863,   1.5326,   1.4804,   1.9977]],
       device='cuda:0'), 'pred_scores': torch.tensor([0.9997, 0.9993, 0.9993, 0.9992, 0.9973, 0.9932, 0.9905, 0.9806, 0.9776,
        0.9706, 0.9371, 0.9229, 0.9110, 0.8930, 0.7583, 0.7257, 0.7074, 0.6582,
        0.3055, 0.2738, 0.2719, 0.1380, 0.1135, 0.1080], device='cuda:0'), 'pred_labels': torch.tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
       device='cuda:0')}]#233  
################ data end
ref_boxes=pred_dicts[0]['pred_boxes']
ref_boxes2=pred_dicts2[0]['pred_boxes']

ref_labels=pred_dicts[0]['pred_labels']
ref_labels2=pred_dicts2[0]['pred_labels']

ref_score=pred_dicts[0]['pred_scores']
ref_score2=pred_dicts2[0]['pred_scores']
if ref_boxes is not None and len(ref_boxes) > 0:
    ref_corners3d = visual_utils.visualize_utils.boxes_to_corners_3d(ref_boxes)
if ref_boxes2 is not None and len(ref_boxes2) > 0:
    ref_corners3d2 = visual_utils.visualize_utils.boxes_to_corners_3d(ref_boxes2)
#print(ref_corners3d)

""" box_1=ref_corners3d[2]#local coordinate
box_2=ref_corners3d2[2]#box2  in car2's local coordinate
box_2_converted=data_transform.coor_tran(box_2)

voxel_1=ref_boxes[2][3:6]
voxel_2=ref_boxes2[2][3:6]
print(IOU.calculate_IOU(box_1.cpu().numpy(),box_2_converted.cpu().numpy(),
                                                                               voxel_1.cpu().numpy(),voxel_2.cpu().numpy()))  """

match_boxes={}
rm_local=set()
rm_tran =set()
IOU_threshold=0.3
f=open('match_boxes_log_158_233','w')
#print("****************    begin calculateing ************************")
f.write("****************    begin calculateing ************************")
f.write('\n')
for i in range(0,len(ref_corners3d)):
    #print(i)
    f.write(str(i))
    f.write('\n')
    for j in range(0,len(ref_corners3d2)):
        #if match_boxes.get('j') is  None and ref_labels[i]==1 and ref_labels2[j]==1: ##not find j      #only choose the cars
        if ref_labels[i]==1 and ref_labels2[j]==1: ##not find j      #only choose the cars
            #print("calculate the iou of ",i," and ",j)
            f.write("calculate the iou of "+str(i)+" and "+str(j))
            f.write('\n')
            box_1=ref_corners3d[i]
            box_2=ref_corners3d2[j]
            box_2_converted=data_transform.coor_tran(box_2)
            voxel_1=ref_boxes[i][3:6]
            voxel_2=ref_boxes2[j][3:6]
            #iou=IOU.calculate_IOU(box_1.cpu().numpy(),box_2_converted.cpu().numpy(),voxel_1.cpu().numpy(),voxel_2.cpu().numpy())
            iou=IOU.calculate_IOU(box_1.cpu().numpy(),box_2_converted.cpu().numpy())
            #print("the iou of ",i,"and",j," is ",iou)
            f.write("the iou of "+str(i)+"and"+str(j)+" is "+str(iou))
            f.write('\n')
            if(iou>0 and iou <IOU_threshold) :
                if(ref_score2[j]>0.9 and ref_score2[j]>ref_score[i]):
                    rm_local.add(i)
                else:
                    rm_tran.add(j)
                print(i,j) 
            if(iou>IOU_threshold):
                match_boxes[i]=j 
                #print("match_boxes are",i," ",j)
                f.write("match_boxes are"+str(i)+" "+str(j))
                f.write('\n')
print(rm_local)
print(rm_tran)
f.write(str(match_boxes))
f.write('\n')
f.write("*********** end calculating *****************")
f.close()
